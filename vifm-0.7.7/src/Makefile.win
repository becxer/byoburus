CC = $(CROSS)gcc
LD = $(CROSS)ld
WINDRES = $(CROSS)windres

CFLAGS := -c -Wall -Werror -MMD -DPDC_WIDE -D_XOPEN_SOURCE $(CFLAGS) -include ../config.h
ifeq ($(RELEASE),1)
    CFLAGS += -O2
else
    CFLAGS += -g -O0
endif

LDFLAGS := $(LDFLAGS)

LIBS := -lregex -lpdcurses -lnetapi32 -lpthread -lws2_32

DIRS := ./ cfg/ engine/ menus/ modes/ modes/dialogs/ utils/

cfg := config.c hist.c info.c
cfg := $(addprefix cfg/, $(cfg))

engine := cmds.c functions.c completion.c keys.c options.c parsing.c \
          text_buffer.c var.c variables.c
engine := $(addprefix engine/, $(engine))

menus := apropos_menu.c bookmarks_menu.c colorscheme_menu.c commands_menu.c \
         dirhistory_menu.c dirstack_menu.c filetypes_menu.c find_menu.c \
         grep_menu.c history_menu.c jobs_menu.c locate_menu.c trash_menu.c \
         trashes_menu.c map_menu.c menus.c registers_menu.c undolist_menu.c \
         users_menu.c vifm_menu.c volumes_menu.c
menus := $(addprefix menus/, $(menus))

dialogs := attr_dialog_win.c change_dialog.c sort_dialog.c
dialogs := $(addprefix dialogs/, $(dialogs))

modes := $(dialogs) cmdline.c file_info.c menu.c modes.c normal.c view.c \
         visual.c
modes := $(addprefix modes/, $(modes))

utilities := env.c file_streams.c filter.c fs.c int_stack.c log.c path.c str.c \
             string_array.c tree.c utf8.c utils.c utils_win.c
utilities := $(addprefix utils/, $(utilities))

vifm_SOURCES := $(cfg) $(engine) $(menus) $(modes) $(utilities) background.c \
                bookmarks.c bracket_notation.c builtin_functions.c \
                color_manager.c color_scheme.c column_view.c commands.c \
                commands_completion.c compile_info.c dir_stack.c escape.c \
                file_magic.c filelist.c filename_modifiers.c fileops.c \
                filetype.c fuse.c globals.c ipc.c macros.c main_loop.c ops.c \
                opt_handlers.c path_env.c quickview.c registers.c running.c \
                search.c signals.c sort.c status.c tags.c term_title.c trash.c \
                types.c ui.c undo.c version.c viewcolumns_parser.c vifmres.o \
                vifm.c

vifm_OBJECTS := $(vifm_SOURCES:.c=.o)
vifm_EXECUTABLE := vifm.exe

converter_SOURCES := vifmrc-converter.c
converter_OBJECTS := $(converter_SOURCES:.c=.o)
converter_EXECUTABLE := vifmrc-converter.exe

win_helper_SOURCES := win_helper.c
win_helper_OBJECTS := $(win_helper_SOURCES:.c=.o)
win_helper_EXECUTABLE := win_helper.exe

.PHONY: all clean tests update_compile_info

all: ../config.h ../data/vifm-help.txt $(vifm_EXECUTABLE) \
	$(converter_EXECUTABLE) $(win_helper_EXECUTABLE)

$(vifm_EXECUTABLE): $(vifm_OBJECTS)
	$(CC) $^ -o $@ $(LDFLAGS) $(LIBS)
$(converter_EXECUTABLE): $(converter_OBJECTS)
	$(CC) $^ -o $@ $(LDFLAGS)
$(win_helper_EXECUTABLE): $(win_helper_OBJECTS)
	$(CC) $^ -o $@ $(LDFLAGS)

vifm.res: vifm.rc ../data/graphics/vifm.ico
	$(WINDRES) --use-temp-file -i ./vifm.rc -o vifm.res

vifmres.o: vifm.res
	$(WINDRES) --use-temp-file -i ./vifm.res -o vifmres.o

../config.h:
	@echo Creating sample ../config.h
	echo '#define VERSION "0.7.7"' > ../config.h; \
	echo '#define ENABLE_EXTENDED_KEYS' >> ../config.h; \
	echo '#define _GNU_SOURCE 1' >> ../config.h; \
#	echo '#define HAVE_FILE_PROG' >> ../config.h; \

version.o: $(filter-out version.o, $(vifm_OBJECTS))
compile_info.c: update_compile_info

update_compile_info:
	@before="$$(cat "compile_info.c" 2> /dev/null)"; \
	if [ "x$$(which git)" != "x" ]; then \
		unset GIT_DIR; \
		new="const char GIT_HASH[] = \"$$(git rev-parse HEAD)\";"; \
	else \
		new='const char GIT_HASH[] = "";'; \
	fi; \
	if [ "x$$before" != "x$$new" -o ! -f "compile_info.c" ]; then \
		echo "$$new" > compile_info.c; \
	fi

.c.o:
	$(CC) $(CFLAGS) $< -o $@

../data/vifm-help.txt: ../data/vifm.1
	@if [ "x$$(which groff)" != "x" -a "x$$(which sed)" != "x" ]; then \
		groff -Tutf8 -man ../data/vifm.1 | sed -e 's/.\x08//g' -e 's/\x1b\[[0-9]*m//g' -e 's/\r//g' >| '$@'; \
	fi

tags.c: ../data/vim/doc/vifm.txt
	@if [ "x$$(which vim)" != "x" -a "x$$(which cat)" != "x" -a "x$$(which awk)" != "x" ]; then \
		vim -T pcterm -u NONE -c 'helptags $(dir $<)|q'; \
		cat $(dir $<)/tags | awk ' \
			BEGIN { \
				print "const char *tags[] = {" \
			} \
			{ \
				print "\t\"" $$1 "\"," \
			} \
			END { \
				print "\t0,\n};" \
			} \
		' > $@; \
		dos2unix "$@"; \
	fi

tests:
	make -C ../tests

clean:
	-$(RM) $(addsuffix *.o, $(DIRS))
	-$(RM) $(addsuffix *.d, $(DIRS))
	-$(RM) *.res *.exe

include $(wildcard $(addsuffix *.d, $(DIRS)))
